PROGRAMMING TEST:-
Q1. Here is an function to return the maximum value in a list. There is an error in this function. Provide an input list for which maxbad produces an incorrect output.

def maxbad(l):
  mymax = l[-1]
  for i in range(-1,-len(l),-1):
    if l[i] > mymax:
       mymax = l[i]
  return(mymax)
Answer:-

[-2,-3,-4]
Q2. Here is an implementation of quicksort, which splits the input list according the pivot value, sorts each part and arranges the sorted parts with the pivot in between to give the final sorted sequence. There is a small error in the implementation. Provide an input list for which this version of quicksort produces an incorrect output.

Code:-

def quicksortbad(l):
  if len(l) < 2:
    return(l)
  else:
    pivot = l[0]
    smaller = [l[j] for j in range(1,len(l)) if l[j] < pivot]
    bigger = [l[j] for j in range(1,len(l)) if l[j] > pivot]
    rearrange = quicksortbad(smaller) + [pivot] + quicksortbad(bigger)
    return(rearrange)
Answer:-

[11,22,33,40,40]
Q3. The median of three numbers x,y,z is the second number in the sequence when the three numbers are sorted in ascending or descending order. Here is a function to compute the median of three input integers. You have to fill in the missing lines.

def median3(x,y,z):
  if x <= y:
    if x >= z:
       mymedian = x
  # Your code below this line


  # Your code above this line
  return(mymedian)
Answer:-

  if x>y:
      if x<z:
        mymedian=x
      elif y>z:
        mymedian=y
      else:
        mymedian=z
  else:
      if x>z:
        mymedian=x
      elif y<z:
        mymedian=y
      else:
        mymedian=z
        
Q4. A list is a decreasing if each element is strictly smaller than the preceding one. For instance [], [7], [11,8] and [89,63,44,19,3] are decreasing, while [3,18,4] and [23,14,14,3] are not. Here is a recursive function to check if a list is decreasing. You have to fill in the missing argument for the recursive call.

def decreasing(l):
  if l==[] or len(l) == 1:
    return(True)
  else:
    return(...)
Answer:-

decreasing(l[1:]) if l[0] > l[1] else False
Q5. A positive integer n is a sum of three cubes if n = i3 + j3 + k3 for integers i,j,k such that i ≥ 1, j ≥ 1 and k ≥ 1. For instance, 10 is a sum of three cubes because 10 = 13 + 13 + 23, and so is 36 (13 + 23 + 33). On the other hand, 4 and 11 are not sums of three cubes.

Write a Python function sum3cubes(n) that takes a positive integer argument and returns True if the integer is a sum of three cubes, and False otherwise.

Code:-

def sum3cubes(n):
  sum=0
  for i in range(1,n):
    for j in range(1,n):
      for k in range(1,n):
        if (i*i*i+j*j*j+k*k*k) == n:
          sum+=1
  if sum>=1: 
    return True
  else:
    return False
Q6. Write a Python function uncommon(l1,l2) that takes two lists sorted in ascending order as arguments and returns the list of all elements that appear in exactly one of the two lists. The list returned should be in ascending order. All such elements should be listed only once, even if they appear multiple times in l1 or l2.

Thus, uncommon([2,2,4],[1,3,3,4,5]) should return [1,2,3,5] while uncommon([1,2,3],[1,1,2,3,3]) should return [].

Code:-

def uncommon(l1,l2) :
    s1 = set(l1)
    s2 = set(l2)
    union = s1|s2
    intersection = s1 & s2
    ans = list(union - intersection)
    ans.sort()
    return ans
Q7. Write a Python program that reads input from the keyboard (standard input). The input will be terminated by a blank line. The lines are numbered 0,1,2,… Your program should print out the even numbered lines followed by the odd numbered lines. In other words, first print lines 0,2,4,… then lines 1,3,5,…

Line zero
Line one
Line two
Line three
Line four
Answer:-

x = input()
c = 0
even = []
odd = []
while len(x) > 0 :
    if c%2 == 0 :
        even.append(x)
    else :
        odd.append(x)
    x = input()
    c+=1
for eve in even :
    print(eve)
for od in odd :
    print(od)
Q8. Write a Python function aboveaverage(l) that takes a list of pairs of the form (name,score) as argument, where name is a string and score is an integer. Each pair is to be interpreted as the score of the named player. For instance, an input of the form [(‘Kohli’,73),(‘Ashwin’,33),(‘Kohli’,7),(‘Pujara’,122),(‘Ashwin’,90)] represents two scores of 73 and 7 for Kohli, two scores of 33 and 90 for Ashwin and one score of 122 for Pujara. Your function should compute the list of players whose individual average score is greater than or equal to the overall average score.

Code:-

def aboveaverage(l):
    d = {}
    for i in l:
        name, score = i
        if name in d:
            tot_score, num = d[name]
            d[name] = (tot_score+score, num+1)
        else:
            d[name] = (score, 1)
    max= -1
    for k in d:
        tot_score, num = d[k]
        ave = tot_score/num
        if(max < ave):
            max = ave
    l = []
    for k in d:
        tot_score, num = d[k]
        ave = tot_score/num
        if(max == ave):
            l.append(k)
    l.sort()
    return l
